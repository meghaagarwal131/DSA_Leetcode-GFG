class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>>  ans = new ArrayList<>();
        String[][] chess = new String[n][n]; 
          for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                chess[i][j] = ".";
        Queens(chess, 0, ans);
return ans;
    }

    public void Queens(String[][] chess, int row,  List<List<String>>  ans){
        if(row==chess.length){
            ans.add(construct(chess));
            return;
        }

        for(int i=0;i<chess.length;i++){
            if(AllQueenSafe(chess,row,i)){
            chess[row][i] = "Q";
            Queens(chess, row+1, ans); 
            chess[row][i] = ".";  
            }
        }

    }

      public boolean AllQueenSafe(String[][] chess, int row, int col){

          for(int i=row-1, j=col; i>=0;i--){
              if(chess[i][j].equals("Q")) return false;
          }

          for(int i=row-1, j=col-1; i>=0 && j>=0;i--,j--){
              if(chess[i][j].equals("Q")) return false;
          }

          for(int i=row-1, j=col+1; i>=0 && j<chess.length;i--,j++){
              if(chess[i][j].equals("Q")) return false;
          }

          return true;
      }


       public List<String> construct(String[][] chess){

      List<String> temp = new ArrayList<>(); 
           for(int i=0;i<chess.length;i++){
               String str = new String();
              for(int j=0;j<chess.length;j++){
                  str+= chess[i][j];

              }
               temp.add(str);
           }
return temp;
       }
}















